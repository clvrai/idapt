import xml.etree.ElementTree as ET


class XML_mod:
    def __init__(self, xml):
        self.root = ET.fromstring(xml)
        # clean all the inertials generated by mujoco
        for i in self.root.findall(".//body"):
            i.remove(i.find("./inertial"))

    def set_all_by_xpath(self, xpath, attribute, value):
        for elem in self.root.findall(xpath):
            elem[attribute] = str(value)

    def set_friction(self, xpath, value, friction_type):
        if "friction" in self.root.find(xpath).attrib:
            old_friction = self.root.find(xpath).attrib["friction"]
        else:
            old_friction = "1 0.005 0.0001"
        old_friction = old_friction.split(" ")

        if friction_type is not None:
            # default to sliding friction
            old_friction[0] = str(value)
        elif friction_type == "sliding":
            old_friction[0] = str(value)
        elif friction_type == "torsinal":
            old_friction[1] = str(value)
        elif friction_type == "rolling":
            old_friction[2] = str(value)
        else:
            raise Exception("%s is not a friction type" % (friction_type))

        new_friction = " ".join(old_friction)
        self.root.find(xpath).attrib["friction"] = new_friction

    def set_by_type_name(self, elem_type, name, attribute, value, **kwargs):
        if name == "default":
            # name "default" is seen as instruction to default class
            xpath = "./default/%s" % (elem_type)
            if self.root.find(xpath) is None:
                self.root.find("/default").append(ET.Element("elem_type"))
        else:
            xpath = ".//%s[@name='%s']" % (elem_type, name)

        if self.root.find(xpath) is None:
            raise Exception("No %s element and name=%s found" % (elem_type, name))

        if attribute == "friction":
            self.set_friction(xpath, value, friction_type=kwargs["friction_type"])
        else:
            self.root.find(xpath).attrib[attribute] = str(value)

    def set_by_instruction(self, instruction):
        """
        modify xml by instruction
        Format of instruction is  "{elem_type}.{name}.{attribute}.{value}[.extra_args]"
        Format of each arg in extra_args is "arg_name=value"
        """
        instruction = instruction.split(".")
        extra_args = {}
        if len(instruction) > 4:
            for arg in instruction[4:]:
                arg = arg.split("=")
                extra_args[arg[0]] = arg[1]

        self.set_by_type_name(*instruction[:4], **extra_args)

    def mod_xml(self, instructions):
        for inst in instructions:
            self.set_by_instruction(inst)

    def save_xml(self, path):
        with open(path, "w") as f:
            f.write(ET.tostring(self.root).decode("utf-8"))
